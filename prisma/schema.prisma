generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL_LOCAL")
}

enum RoleType {
  ADMIN
  DEVELOPER
  MANAGER
  TESTER
  TEAM_LEAD
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  role        RoleType @default(MANAGER)
  users       User[]   @relation("UserRoles")
}

model User {
  id          String    @id @default(cuid())
  name        String    @unique
  password    String
  roleId      String
  role        Role      @relation(fields: [roleId], references: [id], name: "UserRoles")
  boards      Board[]   @relation("UserBoards")
  ownedBoards Board[]   @relation("OwnedBoards")
  tasks       Task[]
  subtasks    Subtask[]
}

model Board {
  id       String        @id @default(cuid())
  title    String
  ownerId  String
  owner    User          @relation(fields: [ownerId], references: [id], name: "OwnedBoards")
  columns  BoardColumn[]
  sprints  Sprint[]
  users    User[]        @relation("UserBoards")
  sections Section[]
}

model BoardColumn {
  id       String    @id @default(cuid())
  title    String
  status   String
  position Int       @default(0)
  boardId  String
  board    Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks    Task[]    @relation("ColumnTasks")
  subtasks Subtask[] @relation("ColumnSubtasks")
}

model Section {
  id      String @id @default(cuid())
  title   String
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks   Task[] @relation("SectionTasks")
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  columnId    String
  column      BoardColumn @relation(fields: [columnId], references: [id], name: "ColumnTasks", onDelete: Cascade)
  sectionId   String?
  section     Section?    @relation(fields: [sectionId], references: [id], name: "SectionTasks", onDelete: SetNull)
  assigneeId  String?
  assignee    User?       @relation(fields: [assigneeId], references: [id])
  sprintId    String?
  sprint      Sprint?     @relation(fields: [sprintId], references: [id], name: "SprintTasks", onDelete: SetNull)
  startDate   DateTime?
  endDate     DateTime?
  subtasks    Subtask[]   @relation("TaskSubtasks")
  approved    Boolean     @default(false)
}

model Subtask {
  id           String      @id @default(cuid())
  title        String
  description  String?
  parentTaskId String
  parentTask   Task        @relation(fields: [parentTaskId], references: [id], name: "TaskSubtasks", onDelete: Cascade)
  assigneeId   String?
  assignee     User?       @relation(fields: [assigneeId], references: [id])
  completed    Boolean     @default(false)
  columnId     String
  column       BoardColumn @relation(fields: [columnId], references: [id], name: "ColumnSubtasks", onDelete: Cascade)
}

model Sprint {
  id        String   @id @default(cuid())
  title     String
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  backlog   Task[]   @relation("SprintTasks")
  startDate DateTime
  endDate   DateTime
}
